package ${package.Controller};

import java.util.List;

import org.apache.commons.collections.ListUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
#if(${restControllerStyle})
import org.springframework.web.bind.annotation.RestController;
#else
import org.springframework.stereotype.Controller;
#end

import com.baomidou.mybatisplus.mapper.EntityWrapper;
import com.baomidou.mybatisplus.plugins.Page;
import com.wordnik.swagger.annotations.Api;
import ${package.Service}.${table.serviceName};
#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end
import com.zl.sp.common.DataGridInfo;
import com.zl.sp.utils.BeanMapper;
import com.zl.sp.utils.SpTools;
import com.zl.sp.common.Tip;
import com.zl.sp.common.PageFactory;
import com.zl.sp.common.CommonMessage;
import ${package.Entity}.${entity};
import ${package.Model}.${modelName};
/**
 * <p>
 * $!{table.comment} 前端控制器
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
@Api(value="${uriPath}")
#if(${restControllerStyle})
@RestController
#else
@Controller
#end
@RequestMapping("${uriPath}")
#if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass} {
#else
public class ${table.controllerName} {
#end
	@Autowired
    ${table.serviceName} service;
    
	@PostMapping(value="/_list",produces=MediaType.APPLICATION_JSON_UTF8_VALUE)
    public Tip list(@RequestBody(required=false) ${modelName} param) {
    	
        EntityWrapper<${entity}> wrapper = SpTools.createEntityWrapper(param,${entity}.class); 	
        List<${entity}> rs = service.selectList(wrapper);
        if(SpTools.isEmpty(rs)) {
        	return succes(CommonMessage.COMMON_MESSAGE_NOTFOUND);
        }
        
        return succes(BeanMapper.mapList(rs, ${entity}.class, ${modelName}.class));
    }
    
    @SuppressWarnings("unchecked")
    @PostMapping(value="/_page",produces=MediaType.APPLICATION_JSON_UTF8_VALUE)
    public DataGridInfo page(@RequestBody(required=false) ${modelName} param) {
    	
        EntityWrapper<${entity}> wrapper = SpTools.createEntityWrapper(param,${entity}.class);        
    	Page<${entity}>  page = service.selectPage(PageFactory.getPageParam(param), wrapper);
    	
    	List<${entity}> entityList = page.getRecords();
    	if(SpTools.isNotEmpty(entityList)) {
    	  //将实体对象转换成BO
    	  List<${entity}BO> boList = BeanMapper.mapList(entityList, ${entity}.class, ${modelName}.class);
    	  entityList.clear();
    	  entityList = null;
    	  return super.packForDataGrid(page,boList);
    	}
    	return super.packForDataGrid(page,ListUtils.EMPTY_LIST);
    }
    
    @GetMapping(value="/{id}",produces=MediaType.APPLICATION_JSON_UTF8_VALUE)
    public Tip get(@PathVariable Integer id) {
        
        ${entity} entity = service.selectById(id);
        if(SpTools.isEmpty(entity)) {
        	return succes(CommonMessage.COMMON_MESSAGE_NOTFOUND);
        }        
        return succes(BeanMapper.map(entity, ${modelName}.class));
    }

    @PostMapping(produces=MediaType.APPLICATION_JSON_UTF8_VALUE)
    public Tip save(@RequestBody ${modelName} param) {		
		
		//将BO转换为entity对象
	    ${entity} entity = BeanMapper.map(param, ${entity}.class);
		service.insert(entity);
        return super.succes();
    }
    
    @PutMapping(value="/{id}",produces=MediaType.APPLICATION_JSON_UTF8_VALUE)
    public Tip update(@PathVariable Integer id,@RequestBody ${modelName} param) {
		
		//将BO转换为entity对象
	    ${entity} entity = BeanMapper.map(param, ${entity}.class);
	    entity.setId(id);	    
		service.updateById(entity);
        return super.succes();
    }

    @DeleteMapping(value = "/{id}",produces=MediaType.APPLICATION_JSON_UTF8_VALUE)
    public Tip delete(@PathVariable Integer id) {
        service.deleteById(id);
        return super.succes();
    }
}